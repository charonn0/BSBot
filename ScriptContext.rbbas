#tag Class
Protected Class ScriptContext
	#tag Method, Flags = &h0
		Sub Abort()
		  Debug("Script called abort!")
		  Dim err As New RuntimeException
		  err.Message = "Script called abort!"
		  err.ErrorNumber = 666
		  Raise err
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ChannelUserPermissions(Name As String) As Integer
		  If Globals.cNamesDict.HasKey(Name) Then
		    Return Globals.cNamesDict.Value(Name)
		  Else
		    LastError = 10
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CreateTimer(TTL As Integer, ScriptName As String) As Integer
		  'Dim t As New Timer
		  'AddHandler t.Action, AddressOf TimerLoopHander
		  Dim i As Integer = randNumber(100, 1000)
		  While Not Timers.HasKey(i)
		    i = randNumber(100, 1000)
		  Wend
		  Dim x As TimerJob
		  x.TTL = TTL
		  x.Invoke = ScriptName
		  Timers.Value(i) = x
		  Return i
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Debug(Message As String)
		  //Don't call this method except from a script. Use Globals.Debug instead.
		  Globals.Debug(Message)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub Destructor()
		  Globals.LastError = 0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function EOL() As String
		  Globals.Debug("Get EOL Character")
		  Return EndOfLine.Windows
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ErrorMessage(ErrCode As Integer) As String
		  Static errors As New Dictionary( _
		  0: "Not an error.", _
		  1: "The specified file was not found or is not readable.", _
		  2: "Access was denied.", _
		  3: "The mathematical expression is not sane.", _
		  4: "The regular expression is invalid.", _
		  5: "You cannot create any additional subscripts.", _
		  6: "ScriptInvoke encountered an Out Of Memory exception.", _
		  7: "ScriptInvoke encountered a Stack Overflow exception.", _
		  8: "The crypt or decrypt method failed.", _
		  9: "Read-only properties of the script environment cannot be written to.", _
		  10: "The specified user is not joined to the current channel.", _
		  11: "There is no key at that Index in Global Storage.", _
		  12: "Global storage did not contain the named key.", _
		  13: "Could not create global storage object.", _
		  14: "Could not delete global storage object.", _
		  15: "Global storage is empty.", _
		  16: "String normalization failed.", _
		  17: "The Global Storage object cannot hold any more Keys.", _
		  18: "There is not enough space in Global Storage for the specified Value.", _
		  19: "The specified nickname is invalid.", _
		  20: "The specified channel is invalid.", _
		  -1: "The requested function failed for unknown reasons.", _
		  99: "An error was generated by a function which should never generate an error.", _
		  42: "Towel not found.")
		  
		  If errors.HasKey(ErrCode) Then
		    Return errors.Value(ErrCode)
		  Else
		    Return "Unspecified error."
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FileExists(Path As String) As Boolean
		  Globals.Debug("Locate " + Path)
		  Dim f As FolderItem = GetFolderItem(path)
		  If f <> Nil Then
		    Return f.Exists
		  Else
		    OutputWarning("Invalid path")
		    LastError = 1
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FileRead(path As String) As String
		  Globals.Debug("Read '" + path + "'")
		  Dim f As FolderItem = GetFolderItem(path)
		  If f = Nil Then
		    Debug("Read failed: File doesn't exist.")
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    LastError = 1
		    Return ""
		  End If
		  If FileExists(f.AbsolutePath) Then
		    Dim tis As TextInputStream
		    Dim ret As String
		    tis = tis.Open(f)
		    ret = tis.ReadAll
		    tis.Close
		    If DetectEncoding(ret) = ASCII Then
		      ret = ConvertEncoding(ret, Encodings.UTF16)
		    Else
		      ret = DefineEncoding(ret, Encodings.UTF16)
		    End If
		    Return ret
		  Else
		    LastError = 1
		    Debug("Read failed: File doesn't exist.")
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		  
		Exception
		  OutPutWarning(Str(f.LastErrorCode))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FileSize(Path As String) As Int64
		  Globals.Debug("Get size of '" + Path + "'")
		  If FileExists(Path) Then
		    Return GetFolderItem(Path).Length
		  Else
		    LastError = 1
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FileWrite(path As String, data As String, Mode As Integer) As Boolean
		  Globals.Debug("Write '" + path + "'")
		  Dim f As FolderItem = GetFolderItem(path)
		  Dim tos As TextOutputStream
		  If f.Exists Then
		    If Mode = FileModeOverwrite Then
		      tos = tos.Create(f)
		    ElseIf Mode = FileModeAppend Then
		      tos = tos.Append(f)
		    End If
		  Else
		    tos = tos.Create(f)
		  End If
		  tos.Write(data)
		  tos.Close
		  Return True
		  
		Exception
		  Globals.Debug("Write failed. Error Code: " + Str(f.LastErrorCode))
		  LastError = f.LastErrorCode * -1
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return False
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FormatBytes(bytes As UInt64) As String
		  //Converts raw byte amounts into SI formatted strings. Uses base 2 values rather than base 10 (1KB = 1024 bytes rather than 1KB = 1000 bytes)
		  Globals.Debug("Prettify " + Str(bytes))
		  Dim prettyString As String
		  Dim prettyDouble As Double
		  
		  If bytes <= 512000 Then
		    prettyDouble = bytes / 1024
		    prettyString = "KB"
		  ElseIf bytes > 512000 And bytes < 786432000 Then  //786432000 bytes = 750 MB
		    prettyDouble = bytes / 1048576
		    prettyString = "MB"
		  ElseIf bytes >= 786432000 And bytes < 17179999999 Then
		    prettyDouble = bytes / 1073741824
		    prettyString = "GB"
		  ElseIf bytes >= 17179999999 Then
		    prettyDouble = 1.0
		    prettyString = " shitload of bytes"
		  Else
		    prettyDouble = bytes
		    prettyString = " bytes"
		  End If
		  
		  Return Format(prettyDouble, "####0.0#") + prettyString
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FormatPath(path As String, maxLength As Integer) As String
		  //Trims characters from the middle of a string until path.Len is less than the specified length.
		  //Useful for showing long paths by omitting the middle part of the path
		  Globals.Debug("Prettify '" + path + "'")
		  if path.Len <= maxLength then
		    Return path
		  else
		    Dim shortPath, snip As String
		    Dim start As Integer
		    shortPath = path
		    
		    While shortPath.len > maxLength
		      start = shortPath.Len / 3
		      snip = mid(shortPath, start, 5)
		      shortPath = Replace(shortPath, snip, "...")
		    Wend
		    Return shortPath
		  end if
		  
		Exception err
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return path
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalCount() As Integer
		  //Returns a the number of items in GlobalDataStore
		  
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  LastError = 0
		  Return GlobalDataStore.Count
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalDelete(Index As Integer) As Boolean
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End If
		  If GlobalDataStore.Count <= Index Then
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End If
		  
		  
		  Try
		    Dim key As String = GlobalDataStore.Key(Index)
		    GlobalDataStore.Remove(key)
		    If GlobalDataStore.HasKey("key") Then
		      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		      Globals.Debug(ErrorMessage(LastError))
		      LastError = 14
		      Return False
		    Else
		      LastError = 0
		      Return True
		    End If
		  Catch
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End Try
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalDelete(Key As String) As Boolean
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End If
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  If GlobalDataStore.HasKey(key) Then
		    GlobalDataStore.Remove(key)
		    If GlobalDataStore.HasKey(key) Then
		      LastError = 14
		      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		      Globals.Debug(ErrorMessage(LastError))
		      Return False
		    Else
		      LastError = 0
		      Return True
		    End If
		  Else
		    LastError = 12
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return False
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalDump() As String
		  //Serializes and Returns the contents of GlobalDataStore
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		  
		  Dim s As New JSONItem
		  Dim ret As String
		  For i As Integer = 0 To GlobalDataStore.Count - 1
		    s.Value(GlobalDataStore.Key(i).StringValue) = GlobalDataStore.Value(GlobalDataStore.Key(i))
		  Next
		  LastError = 0
		  ret = s.ToString
		  InternalCall = True
		  LastError = GlobalNormalizeKey(ret)
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalEnumKeys() As String()
		  //Returns a String array of all keys in GlobalDataStore
		  
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return Nil
		  End If
		  
		  Dim ret() As String
		  For i As Integer = 0 To GlobalDataStore.Count - 1
		    Dim key As String = GlobalDataStore.Key(i).StringValue
		    InternalCall = True
		    LastError = GlobalNormalizeKey(key)
		    ret.Append(key)
		  Next
		  LastError = 0
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalEnumValues() As String()
		  //Returns a String array of all values in GlobalDataStore
		  
		  If GlobalDataStore = Nil Then
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    LastError = 15
		    Return Nil
		  End If
		  
		  Dim ret() As String
		  For i As Integer = 0 To GlobalDataStore.Count - 1
		    ret.Append(GlobalDataStore.Value(GlobalDataStore.Key(i).StringValue))
		  Next
		  LastError = 0
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalNormalizeKey(ByRef key As String) As Integer
		  Debug("Called Normalize Key")
		  If Not InternalCall Then Debug("SHAME! Shame on the script author for calling this function!! Shame!!")
		  If DetectEncoding(key) = ASCII Then
		    key = DefineEncoding(key, Encodings.ASCII)
		  Else
		    key = ConvertEncoding(key, Encodings.ASCII)
		  End If
		  
		  Return 0
		  
		Exception
		  Return 16
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub GlobalPurge()
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return
		  End If
		  GlobalDataStore = Nil
		  LastError = 0
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalRead(Index As Integer) As Integer
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  If GlobalDataStore.Count <= Index Then
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  
		  LastError = 0
		  Try
		    Dim x As Variant = GlobalDataStore.Key(Index)
		    Return x.IntegerValue
		  Catch OutOfBoundsException
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End Try
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalRead(Index As Integer) As String
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		  If GlobalDataStore.Count <= Index Then
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		  
		  LastError = 0
		  Try
		    Dim ret As Variant = GlobalDataStore.Key(Index)
		    Return ret.StringValue
		  Catch OutOfBoundsException
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End Try
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalRead(Key As String) As Integer
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  If GlobalDataStore.HasKey(key) Then
		    LastError = 0
		    Return GlobalDataStore.Value(key)
		  Else
		    LastError = 12
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalRead(Key As String) As String
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  If GlobalDataStore.HasKey(key) Then
		    LastError = 0
		    Return GlobalDataStore.Value(key)
		  Else
		    LastError = 12
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return ""
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalStore(p As Pair) As Integer
		  //DO NOT USE OR DOCUMENT THIS FUNCTION YET
		  
		  If GlobalDataStore = Nil Then
		    GlobalDataStore = New ThrottledDictionary(p)
		    Return 0
		  End If
		  Dim key As Variant = p.Left
		  Dim value As Variant = p.Right
		  
		  GlobalDataStore.Value(key) = Value
		  GlobalDataStore.Size = GlobalDataStore.Size + Value.StringValue.LenB
		  LastError = 0
		  Return GlobalDataStore.Count
		  
		Exception
		  LastError = 13
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalStore(Key As String, Value As Integer) As Integer
		  If GlobalDataStore = Nil Then
		    GlobalDataStore = New ThrottledDictionary(key:Value)
		    Return 0
		  End If
		  
		  LastError = GlobStorThrottle(4)
		  If LastError <> 0 Then
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  GlobalDataStore.Value(key) = Value
		  LastError = 0
		  GlobalDataStore.Size = GlobalDataStore.Size + 4
		  Return GlobalDataStore.Count
		  
		Exception
		  LastError = 13
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalStore(Key As String, Value As String) As Integer
		  If GlobalDataStore = Nil Then
		    GlobalDataStore = New ThrottledDictionary(key:Value)
		    Return 0
		  End If
		  
		  LastError = GlobStorThrottle(LenB(Value))
		  If LastError <> 0 Then
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  InternalCall = True
		  LastError = GlobalNormalizeKey(Value)
		  GlobalDataStore.Value(key) = Value
		  GlobalDataStore.Size = GlobalDataStore.Size + Value.LenB
		  Return GlobalDataStore.Count
		  
		Exception
		  LastError = 13
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalValueType(Index As Integer) As Integer
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  If GlobalDataStore.Count <= Index Then
		    LastError = 11
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  Dim x As Variant = GlobalDataStore.Value(GlobalDataStore.Key(index))
		  LastError = 0
		  Return x.Type
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GlobalValueType(Key As String) As Integer
		  If GlobalDataStore = Nil Then
		    LastError = 15
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		  InternalCall = True
		  LastError = GlobalNormalizeKey(key)
		  If GlobalDataStore.HasKey(key) Then
		    Dim x As Variant = GlobalDataStore.Value(key)
		    LastError = 0
		    Return x.Type
		  Else
		    LastError = 12
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		    Return -1
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function HashCRC32(data as string) As integer
		  Globals.Debug("CRC32 data")
		  Const CRCpolynomial = &hEDB88320
		  Dim crc, t as Integer
		  Dim char as String
		  
		  crc = &hffffffff
		  
		  For x As Integer = 1 To LenB(data)
		    char = Midb(data, x, 1)
		    t = (crc And &hFF) Xor AscB(char)
		    For b As Integer = 0 To 7
		      If((t And &h1) = &h1) Then
		        t = bitwise.ShiftRight(t, 1, 32) Xor CRCpolynomial
		      Else
		        t = bitwise.ShiftRight(t, 1, 32)
		      End If
		    next
		    crc = Bitwise.ShiftRight(crc, 8, 32) Xor t
		  Next
		  Return crc Xor &hFFFFFFFF
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function HashMD5(Data As String) As String
		  Globals.Debug("MD5 data")
		  Return StringToHex(MD5(data))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function InputData() As String()
		  Globals.Debug("Get input")
		  Return CurrentArgs
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Invite(User As String)
		  #If Not TargetHasGUI Then
		    App.bsIrc.preParseOutput("/Invite " + User + " " + Settings.gChannel)
		  #Else
		    OutPutInfo("Invite sent to " + User)
		  #endif
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IPv4DotToInt(dottedIP As String) As UInt32
		  //Returns an unsigned 32 bit integer (UInt32) NOT a plain Integer. Putting the return value into a signed integer variable will
		  //cause weirdness
		  Globals.Debug("Convert Dotted IP to Integer")
		  Return (Val(NthField(dottedIP, ".", 4))) + (Val(NthField(dottedIP, ".", 3)) * 256) + (Val(NthField(dottedIP, ".", 2)) * 256 ^ 2) + (Val(NthField(dottedIP, ".", 1)) * 256 ^ 3)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IPv4IntToDot(s As UInt64) As String
		  //Returns a formatted IPv4 address like "192.168.0.1"
		  Globals.Debug("Convert " + Str(s) + " to IP address")
		  Return Str(((s Mod 16777216) Mod 65536) Mod 256) + "." + Str(((s Mod 16777216) Mod 65536) \ 256) + "." + _
		  Str((s Mod 16777216) \ 65536) + "." + Str(s \ 16777216)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub IRCSay(Message As String)
		  #If TargetHasGUI Then
		    OutPutInfo(Message)
		  #Else
		    If Not subcontext Then
		      Globals.Debug("Say: " + Message)
		      App.bsIrc.preParseOutput(Message)  //First level scripts output to the channel
		    Else
		      //All others output to the calling script
		      Globals.Debug("Subscript Output: " + Message)
		      If Instr(Message, EndOfLine.Windows) > 0 Then
		        For i As Integer = 1 To CountFields(Message, EndOfLine.Windows)
		          Dim line As String = NthField(Message, EndOfLine.Windows, i)
		          Globals.SubRetVal.Append(line)
		        Next
		      Else
		        Globals.SubRetVal.Append(Message)
		      End If
		    End If
		  #endif
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub IRCWhisper(Nick As String, Message As String)
		  IRCSay("/notice " + nick + " " + Message)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IsAuthorizedUser(User As String) As Boolean
		  If Not InternalCall Then Debug("Is " + User + " Authorized?")
		  Dim IsASyncedUser As Boolean
		  If SyncUsers Then
		    If cNamesDict.HasKey(User) Then
		      If cNamesDict.Value(User) = 0 Or cNamesDict.Value(User) = 1 Or cNamesDict.Value(User) = 1 Or cNamesDict.Value(User) = 3 Then
		        IsASyncedUser = True
		      End If
		    End If
		  End If
		  Return Globals.IsAuthorizedUser(user) Or IsASyncedUser Or IsOwner(user)
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IsOwner(User As String) As Boolean
		  Globals.Debug("Is " + User + " an owner")
		  Return Globals.IsOwner(user)
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IsTriggerLoaded(Trigger As String) As Boolean
		  Debug("Is " + Trigger + " loaded?")
		  
		  If DetectEncoding(Trigger) = ASCII Then
		    Trigger = ConvertEncoding(Trigger, Encodings.UTF16)
		  Else
		    Trigger = DefineEncoding(Trigger, Encodings.UTF16)
		  End If
		  
		  If Scripts <> Nil Then
		    If Scripts.HasKey(Trigger) Then
		      Debug("Yes.")
		      Return True
		    Else
		      Debug("No.")
		      Return False
		    End If
		  Else
		    Debug("No.")
		    Return False
		  End If
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IsTriggerReassigned(Trigger As String) As String
		  Debug("Is " + Trigger + " reassigned?")
		  
		  If DetectEncoding(Trigger) = ASCII Then
		    Trigger = ConvertEncoding(Trigger, Encodings.UTF16)
		  Else
		    Trigger = DefineEncoding(Trigger, Encodings.UTF16)
		  End If
		  
		  If Reassignments <> Nil Then
		    If Reassignments.HasKey(Trigger) Then
		      Debug("Yes, to: " + Reassignments.Value(Trigger))
		      Return Reassignments.Value(Trigger)
		    Else
		      Debug("No.")
		      Return ""
		    End If
		  Else
		    Debug("No.")
		    Return ""
		  End If
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function LoadedTriggers() As String
		  Globals.Debug("Enumerate triggers")
		  #If TargetHasGUI Then
		    Return Window1.ScriptTrigger
		  #Else
		    Dim ret As String
		    For i As Integer = 0 To Scripts.Count - 1
		      Dim p As Script = scripts.Value(scripts.Key(i))
		      If Not p.Hidden Then ret = ret + scripts.Key(i) + " "
		    Next
		    Return ret
		  #endif
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function Math(Expression As String) As Double
		  Dim start, ending As String
		  start = "Dim i As Double"
		  ending = "IRCSay(Str(i))"
		  Dim sr As New ScriptHost
		  Dim sc As New ScriptContext
		  ReDim Globals.SubRetVal(-1)
		  sc.subcontext = True
		  sc.mCallDepth = Me.CallDepth + 1
		  sr.Context = sc
		  sr.Source = start + EndOfLine.Windows + "i = " + Expression + EndOfLine.Windows + ending
		  Try
		    sr.CheckMode = True
		    sr.Run
		    While sr.State = sr.kStateRunning
		      App.DoEvents
		    Wend
		    If Globals.SubRetVal.Ubound = -1 Then
		      LastError = 3
		      Return 0.0
		    End If
		    Return Val(Globals.SubRetVal(0))
		  Catch err As ScriptException
		    OutPutWarning(err.Message)
		    //Return 0.0
		  End Try
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function NetDNSResolve(domain As String) As String
		  Globals.Debug("Resolve " + domain)
		  #If TargetWin32 Then
		    Soft Declare Function DnsQuery_A Lib "DNSAPI" (hostname As CString, type As Int16, options As Integer, reserved1 As Integer, ByRef result As Ptr, reserved As Integer) As Integer
		    Soft Declare Sub DnsRecordListFree Lib "DNSAPI" (listPtr As Integer, freeType As Integer)
		    Soft Declare Function GetLastError Lib "Kernel32" () As Integer
		    Const DNS_TYPE_A = &h0001
		    Dim mb As Ptr
		    Dim x As Integer = DnsQuery_A(ConvertEncoding(domain, Encodings.ASCII), DNS_TYPE_A, 0, 0, mb, 0)
		    If x = 0 Then
		      Dim mb1 As MemoryBlock = mb
		      Return IPv4IntToDot(mb1.UInt32Value(24))  //Convert the integer to a dotted string
		    Else
		      LastError = GetLastError * -1
		      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		      Globals.Debug(ErrorMessage(LastError))
		      Return ""
		    End If
		  #ElseIf TargetLinux Then
		    Dim sh As New Shell
		    sh.Execute("nslookup " + " | egrep 'Address:|Addresses:')")
		    If sh.ErrorCode = 0 Then
		      Dim s As String = NthField(sh.Result, EndOfLine, 2)
		      Return NthField(s, ":", 2).Trim
		    Else
		      LastError = sh.ErrorCode * -1
		      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		      Globals.Debug(ErrorMessage(LastError))
		      Return ""
		    End If
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function NetDNSTXTResolve(domain As String) As String
		  Globals.Debug("Resolve TXT " + domain)
		  #If TargetWin32 Then
		    '#If Not TargetHasGUI Then
		    'Print("dig +short txt " + domain + ".wp.dg.cx")
		    '#endif
		    Declare Function DnsQuery_A Lib "DNSAPI" (hostname As CString, type As Int16, options As Integer, reserved1 As Integer, ByRef result As Ptr, reserved As Integer) As Integer
		    Declare Sub DnsRecordListFree Lib "DNSAPI" (listPtr As Ptr, freeType As Integer)
		    Declare Function GetLastError Lib "Kernel32" () As Integer
		    Const DNS_TYPE_TEXT = &h0010
		    'Const DNS_QUERY_ACCEPT_TRUNCATED_RESPONSE = &h00000001
		    'Const DNS_QUERY_BYPASS_CACHE = &h00000008
		    Dim ret As String
		    Dim mb As Ptr
		    Dim x As Integer = DnsQuery_A(ConvertEncoding(domain, Encodings.ASCII) + ".wp.dg.cx", DNS_TYPE_TEXT, 0, _
		    0, mb, 0)
		    If x = 0 Then
		      Dim mb1 As MemoryBlock = mb
		      ret = mb1.CString(48)
		      While mb1.UInt32Value(0) <> 0
		        mb1 = mb1.Ptr(0)
		        ret = ret + mb1.CString(48)
		      Wend
		      DnsRecordListFree(mb1, 1)
		      mb1 = New MemoryBlock(0)
		    Else
		      ret = ""
		    End If
		    
		    Return ret
		  #ElseIf TargetLinux Then
		    Dim sh As New Shell
		    sh.Execute("dig +short txt " + domain + ".wp.dg.cx")
		    If sh.ErrorCode = 0 Or sh.Result <> "" Then
		      Return sh.Result
		    Else
		      Return ""
		      Print(sh.Result)
		    End If
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function NetGet(URL As String) As String
		  Globals.Debug("Get webpage at " + URL)
		  Dim h As New HTTPSocket
		  h.SetRequestHeader("User-Agent", "BSBot " + Str(Version) + " (www.boredomsoft.org)")
		  Return h.Get(url, 10)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function randNumber(x As Integer, y As Integer) As Integer
		  Globals.Debug("Get Random Number")
		  Dim rand As New Random
		  Dim d As New Date
		  rand.Seed = d.TotalSeconds
		  Return rand.InRange(x, y)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function randNumberEx() As Int32
		  Globals.Debug("Get Randomer Number")
		  MersenneTwister.InitByArray(&h123, &h234, &h345, &h456)
		  Return MersenneTwister.RandInt32
		  
		  //Other random number types can be found by looking at the MersenneTwister module (copied directly from Aaron Ballman's MersenneTwister example)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function RefreshNamesList() As Boolean
		  If Not InternalCall Then Debug("Refresh Names List")
		  Wait = True
		  Globals.ReloadNames(Self)
		  While Wait
		    App.DoEvents
		  Wend
		  Return True
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function RegExFind(source As String, pattern As String) As String
		  Globals.Debug("Search '" + source + "' with Regex '" + pattern)
		  Dim rg as New RegEx
		  Dim myMatch as RegExMatch
		  rg.SearchPattern = pattern
		  myMatch=rg.search(source)
		  If myMatch <> Nil Then
		    Globals.Debug("Match found")
		    Return myMatch.SubExpressionString(0)
		  Else
		    Globals.Debug("No Matches")
		    Return ""
		  End If
		  
		Exception err As RegExException
		  LastError = 4
		  Debug("Regex error: " + err.Message)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ScriptInvoke(Trigger As String, Params As String) As String()
		  //ScriptInvoke invokes the script matching the trigger in a new instance of the ScriptHost class
		  //and using a new instance of the ScriptContext
		  
		  If CallDepth > Globals.gMaxScriptDepth Then
		    OutPutWarning("Subscript Call Aborted: Maximum call chain depth exceeded!")
		    LastError = 5
		    Return Nil
		  End If
		  
		  Dim commandNick As String = "BSBotScriptRuntime"   //The BSBotScriptRuntime is a special user that cannot be Authorized.
		  Dim command As String = ConvertEncoding(Trigger, Encodings.UTF16)
		  Dim args() As String = Split(Params, " ")
		  Debug("ScriptInvoke " + Trigger + " " + Params)
		  
		  If Scripts.HasKey(command) Then
		    ReDim Globals.SubRetVal(-1)
		    OutPutInfo("Invoke Script: " + command + " By user '" + commandNick + "'")
		    Debug("Call Chain Depth: " + Str(CallDepth + 1))
		    Dim oldArgs(), oldUser As String
		    oldArgs() = CurrentArgs
		    oldUser = CurrentUser
		    CurrentArgs = args
		    CurrentUser = commandNick
		    Dim p As Script = Scripts.Value(command)
		    If p.builtIn = Nil Then
		      Dim sr As New ScriptHost
		      Dim sc As New ScriptContext
		      sc.subcontext = True
		      sc.mCallDepth = Me.CallDepth + 1
		      sr.Context = sc
		      sr.Source = p.Source
		      Try
		        sr.Run
		        While sr.State = sr.kStateRunning
		          App.DoEvents
		        Wend
		        CurrentArgs = oldArgs
		        CurrentUser = oldUser
		        Return Globals.SubRetVal
		      Catch err As ScriptException
		        OutPutWarning(err.Message)
		        CurrentArgs = oldArgs
		        CurrentUser = oldUser
		        LastError = sc.LastError
		        Return Globals.SubRetVal
		      End Try
		    Else
		      //Call the BuiltInTrigger for the script
		      Globals.SubRetVal.Append(p.builtIn.Invoke(command, commandNick, args))
		      CurrentArgs = oldArgs
		      CurrentUser = oldUser
		      Return Globals.SubRetVal
		    End If
		  Else
		    ReDim Globals.SubRetVal(-1)
		    Return Globals.SubRetVal
		  End If
		  
		Exception err As OutOfMemoryException
		  LastError = 6
		  OutPutWarning("Subscript Call Aborted: Out of Memory!")
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  
		Exception err As StackOverflowException
		  LastError = 7
		  OutPutWarning("Subscript Call Aborted: Stack Overflowed!")
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SecCrypt(PlainText As String, Key As String) As String
		  Globals.Debug("Cipher " + PlainText)
		  Dim strKey As String = Left(Key + "00000000", 8)
		  
		  Dim MM As MemoryBlock = PlainText
		  Dim MM2 As New MemoryBlock(LenB(PlainText))
		  Dim memAsciiArray(255), memKeyArray(255), memJump, memTemp, memY, intKeyLength, intIndex, intT, intX As integer
		  
		  intKeyLength = len(strKey)
		  
		  For intIndex = 0 to 255
		    memKeyArray(intIndex) = asc(mid(strKey, ((intIndex) mod (intKeyLength)) + 1, 1))
		  next
		  
		  For intIndex = 0 to 255
		    memAsciiArray(intIndex) = intIndex
		  next
		  
		  For intIndex = 0 to 255
		    memJump = (memJump + memAsciiArray(intIndex) + memKeyArray(intIndex)) mod 256
		    memTemp = memAsciiArray(intIndex)
		    memAsciiArray(intIndex) = memAsciiArray(memJump)
		    memAsciiArray(memJump) = memTemp
		  next
		  
		  intIndex = 0
		  memJump = 0
		  
		  For intX = 1 to MM2.Size
		    intIndex = (intIndex + 1) mod 256
		    memJump = (memJump + memAsciiArray(intIndex)) mod 256
		    intT = (memAsciiArray(intIndex) + memAsciiArray(memJump)) mod 256
		    memTemp = memAsciiArray(intIndex)
		    memAsciiArray(intIndex) = memAsciiArray(memJump)
		    memAsciiArray(memJump) = memTemp
		    memY = memAsciiArray(intT)
		    mm2.Byte(intX - 1) = bitwise.bitxor(val("&h" + hex(MM.byte(IntX - 1))), bitwise.bitxor(memTemp,memY))
		  next
		  
		  return MM2
		  
		Exception
		  LastError = 8
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SecDeCrypt(CipherText As String, Key As String) As String
		  Return SecCrypt(CipherText, Key)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ShellExecute(Command As String) As String
		  Globals.Debug("ShellExecute " + Command)
		  If Command <> "" Then
		    Dim sh As New Shell
		    sh.Execute(command)
		    LastError = sh.ErrorCode * -1
		    Return sh.Result
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function StringDecode(Data As String) As String
		  Globals.Debug("Decode string")
		  Return DecodeBase64(data)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function StringEncode(Data As String) As String
		  Globals.Debug("Encode string")
		  Return EncodeBase64(data)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function StringToHex(src as string, separator as string = "") As string
		  //Hexify a string, e.g. from RB's built-in MD5 function
		  Globals.Debug("Hexify string")
		  Dim hexvalue As Integer
		  Dim hexedInt As String
		  
		  For n As Integer = 1 To LenB(src)
		    hexvalue = AscB(MidB(src, n, 1))
		    hexedInt = hexedInt + RightB("00" + Hex(hexvalue), 2) + separator
		  next
		  
		  Return LeftB(hexedInt, LenB(hexedInt) - LenB(separator))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SysDateCompare(Day1() As Integer, Day2() As Integer) As Integer
		  Globals.Debug("Date compare")
		  Dim d1 As New Date
		  Dim d2 As New Date
		  d1.Day = Day1(0)
		  d1.Month = Day1(1)
		  d1.Year = Day1(2)
		  d2.Day = Day2(0)
		  d2.Month = Day2(1)
		  d2.Year = Day2(2)
		  
		  Return Sign(d1.TotalSeconds - d2.TotalSeconds)  //Returns -1 if d2>d1, +1 id d2<d1, 0 if d2=d1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SysDateTime() As String
		  Globals.Debug("Get Date/Time")
		  Dim d As New Date
		  Return d.LongDate + " " + d.LongTime
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SysTime() As Integer()
		  Globals.Debug("Get time")
		  Dim d As New Date
		  Dim ret() As Integer
		  ret.Append(d.Hour)
		  ret.Append(d.Minute)
		  ret.Append(d.Second)
		  
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SysTimeCompare(Day1() As Integer, Day2() As Integer) As Integer
		  Globals.Debug("Compare times")
		  Dim d1 As New Date
		  Dim d2 As New Date
		  d1.Hour = Day1(0)
		  d1.Minute = Day1(1)
		  d1.Second = Day1(2)
		  d2.Hour = Day2(0)
		  d2.Minute = Day2(1)
		  d2.Second = Day2(2)
		  
		  Return Sign(d1.TotalSeconds - d2.TotalSeconds)  //Returns -1 if d2>d1, +1 id d2<d1, 0 if d2=d1
		  
		Exception
		  LastError = 99
		  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		  Globals.Debug(ErrorMessage(LastError))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SysTimeOffset() As Integer
		  #If TargetWin32 Then
		    Globals.Debug("Get UTC Offset")
		    Soft Declare Sub GetSystemTime Lib "Kernel32" (ByRef Sysdt As SYSTEMTIME)
		    Dim dt As SYSTEMTIME
		    GetSystemTime(dt)
		    Break
		    
		    Dim d As New Date
		    
		    Return d.Hour - dt.Hour
		  #Else
		    Globals.Debug("UTC Offset function available for Windows hosts only.")
		    Return 25
		  #EndIf
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub TerminateBot()
		  Debug("Terminate Bot")
		  If IsOwner(Nick) Then
		    OutPutWarning("Script Called TerminateBot!!")
		    OutPutFatal("Quitting.")
		    Halt(4)
		  Else
		    OutPutWarning("An unauthorized call to 'TerminateBot' by a script was ignored.")
		    LastError = 2
		    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
		    Globals.Debug(ErrorMessage(LastError))
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub TimerLoopHander(Sender As Timer)
		  #pragma Unused Sender
		  For Each Key As Integer In Timers.Keys
		    Dim x As TimerJob = Timers.Value(Key)
		    If x.TTL = 0 Then
		      Timers.Remove(Key)
		      Call GlobalStore(Key:ScriptInvoke(x.Invoke, ""))
		    ElseIf x.TTL > 0 Then
		      x.TTL = x.TTL - 1
		      Timers.Value(Key) = x
		    End If
		  Next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function UserList() As String()
		  If Globals.cNamesDict = Nil Then Globals.ReloadNames(Self)
		  Dim ret() As String
		  For i As Integer = 0 To Globals.cNamesDict.Count - 1
		    ret.Append(Globals.cNamesDict.key(i))
		  Next
		  //Break  //FIXME?
		  Return ret
		End Function
	#tag EndMethod


	#tag Note, Name = Notes
		This class provides external scripts with access to a number of useful functions. Chief among these functions
		is the IRCSay function, which is the way a script can communicate with the IRC channel the bot is joined to.
		
		The FileRead function allows scripts to read text files provided they know the path to the file. Similarly, FileWrite allows
		writing to a file.
		
		ShellExecute may be used for executing other programs from a script. Note that ShellExecute will block
		until it returns.
		
		NetGet retrieves a file over HTTP and returns its contents as a string.
		
		IsAuthorizedUser is used in conjunction with the authUsers.conf file. It returns True if the specified Nick is in the 
		authUsers.conf file.
		
		The Nick property returns the nickname of the user who invoked the script.
	#tag EndNote


	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Get bot directory")
			  Return App.ExecutableFile.Parent.AbsolutePath
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		BotDirectory As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Query Nick Setting")
			  Return Globals.gNick
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  If Globals.IsOwner(Nick) Or Globals.IsAuthorizedUser(Nick) Then
			    Globals.ScriptRequest = True
			    #If TargetHasGUI Then
			      OutPutInfo("Nick changed to " + value)
			      Settings.gNick = value
			    #Else
			      App.bsIrc.preParseOutput("/nick " + value)
			    #endif
			    While ScriptRequest
			      App.DoEvents
			    Wend
			    
			    If LastError <> 0 Then
			      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			      Globals.Debug(ErrorMessage(LastError))
			    End If
			  Else
			    OutPutWarning("An unauthorized attempt to change the server by a script was ignored.")
			    LastError = 2
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			  End If
			  
			End Set
		#tag EndSetter
		BotNick As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return mCallDepth
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		CallDepth As Integer
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Globals.gChannel
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  '#pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  'LastError = 9
			  If Globals.IsOwner(Nick) Or Globals.IsAuthorizedUser(Nick) Then
			    #If TargetHasGUI Then
			      OutPutInfo("Changing channel to: " + value)
			      Settings.gChannel = value
			    #Else
			      Globals.ScriptRequest = True
			      App.bsIrc.preParseOutput("/part " + Settings.gChannel)
			      App.bsIrc.preParseOutput("/join " + value)
			    #endif
			    While ScriptRequest
			      App.DoEvents
			    Wend
			    
			    If LastError <> 0 Then
			      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			      Globals.Debug(ErrorMessage(LastError))
			    End If
			  Else
			    OutPutWarning("An unauthorized attempt to change the channel by a script was ignored.")
			    LastError = 2
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			  End If
			  
			End Set
		#tag EndSetter
		Channel As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h21
		#tag Getter
			Get
			  return mInternalCall
			  mInternalCall = False
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  mInternalCall = True
			End Set
		#tag EndSetter
		Private InternalCall As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  If Globals.LastError <> 0 Then Return Globals.LastError
			  return mLastError
			  
			  Exception
			    OutPutFatal("Something is seriously wrong!")
			    Halt(2)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Globals.LastError = value
			End Set
		#tag EndSetter
		LastError As Integer
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Globals.gMaxScriptDepth
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		MaxCallDepth As Integer
	#tag EndComputedProperty

	#tag Property, Flags = &h21
		Private mCallDepth As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mChannel As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mInternalCall As Boolean
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mLastError As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mTimers As Dictionary
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Get caller nick")
			  #If TargetHasGUI Then
			    Return "CallerNick"
			  #Else
			    Return CurrentUser
			  #endif
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		Nick As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Get owner")
			  Return Globals.gOwner
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			End Set
		#tag EndSetter
		Owner As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Query Server Setting")
			  return Globals.gServer
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  If Globals.IsOwner(Nick) Then
			    OutPutInfo("Script request to change servers has been granted.")
			    OutPutInfo("New server address: " + value)
			    Settings.gServer = value
			    #If Not TargetHasGUI Then App.reconnect
			  Else
			    OutPutWarning("An unauthorized attempt to change the server by a script was ignored.")
			    LastError = 2
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			  End If
			End Set
		#tag EndSetter
		Server As String
	#tag EndComputedProperty

	#tag Property, Flags = &h0
		subcontext As Boolean
	#tag EndProperty

	#tag Property, Flags = &h21
		Private TimerLoop As Timer
	#tag EndProperty

	#tag ComputedProperty, Flags = &h21
		#tag Getter
			Get
			  If mTimers = Nil Then
			    mTimers = New Dictionary
			    TimerLoop = New Timer
			    TimerLoop.Period = 1000
			    AddHandler TimerLoop.Action, AddressOf TimerLoopHander
			    TimerLoop.Mode = Timer.ModeMultiple
			  End If
			  return mTimers
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  mTimers = value
			End Set
		#tag EndSetter
		Private Timers As Dictionary
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Globals.cTopic
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  '#pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  'LastError = 9
			  
			  If Globals.IsOwner(Nick) Or Globals.IsAuthorizedUser(Nick) Then
			    #If TargetHasGUI Then
			      OutPutInfo("Change topic to: " + value)
			      Settings.cTopic = Value
			    #Else
			      Globals.ScriptRequest = True
			      App.bsIrc.Write(":" + gNick + " TOPIC " + gChannel + " :" + value + EndOfLine.Windows)
			    #endif
			    While ScriptRequest
			      App.DoEvents
			    Wend
			    
			    If LastError <> 0 Then
			      Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			      Globals.Debug(ErrorMessage(LastError))
			    End If
			  Else
			    OutPutWarning("An unauthorized attempt to change the server by a script was ignored.")
			    LastError = 2
			  End If
			End Set
		#tag EndSetter
		Topic As String
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Get uptime")
			  Dim x As UInt64 = Microseconds / 1000000
			  Return x
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		Uptime As UInt64
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Globals.Debug("Get version")
			  Return Globals.Version
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			  Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		Version As Double
	#tag EndComputedProperty

	#tag Property, Flags = &h0
		Wait As Boolean
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  #If TargetHasGUI Then
			    OutPutInfo("No IRC socket.")
			    Return 0
			  #Else
			    return App.bsIrc.LastNumericCode
			  #endif
			  
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  #pragma Unused value
			  'Debug(CurrentMethodName + " is a Read-Only property.")
			  LastError = 9
			  Exception
			    LastError = 99
			    Globals.Debug("Script Exception: " + Str(LastError) + " in " + CurrentMethodName)
			    Globals.Debug(ErrorMessage(LastError))
			End Set
		#tag EndSetter
		_LastIRCCode As Integer
	#tag EndComputedProperty


	#tag Constant, Name = FileModeAppend, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = FileModeOverwrite, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = priorityAboveNormal, Type = Double, Dynamic = False, Default = \"&h8000", Scope = Public
	#tag EndConstant

	#tag Constant, Name = priorityBelowNormal, Type = Double, Dynamic = False, Default = \"&h4000", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PriorityHigh, Type = Double, Dynamic = False, Default = \"&h80", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PriorityIdle, Type = Double, Dynamic = False, Default = \"&h40", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PriorityNormal, Type = Double, Dynamic = False, Default = \"&h20", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PriorityRealTime, Type = Double, Dynamic = False, Default = \"&h100", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESSOR_ARCHITECTURE_AMD64, Type = Double, Dynamic = False, Default = \"9", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESSOR_ARCHITECTURE_IA64, Type = Double, Dynamic = False, Default = \"6", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESSOR_ARCHITECTURE_INTEL, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESSOR_ARCHITECTURE_UNKNOWN, Type = Double, Dynamic = False, Default = \"&hffff", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_ALL_ACCESS, Type = Double, Dynamic = False, Default = \"&h1F0FFF", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_QUERY_INFORMATION, Type = Double, Dynamic = False, Default = \"&h400", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_SET_INFORMATION, Type = Double, Dynamic = False, Default = \"&h200", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_SUSPEND_RESUME, Type = Double, Dynamic = False, Default = \"&h0800", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_TERMINATE, Type = Double, Dynamic = False, Default = \"&h1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PROCESS_VM_READ, Type = Double, Dynamic = False, Default = \"&h10", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SYSTEM_PERFORMANCEINFORMATION, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SYSTEM_TIMEINFORMATION, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = TH32CS_SNAPPROCESS, Type = Double, Dynamic = False, Default = \"&h2", Scope = Public
	#tag EndConstant


	#tag Structure, Name = TimerJob, Flags = &h0
		TTL As Integer
		  Invoke As String*255
		Params As String*255
	#tag EndStructure


	#tag ViewBehavior
		#tag ViewProperty
			Name="BotDirectory"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BotNick"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CallDepth"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Channel"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="LastError"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="MaxCallDepth"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Nick"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Owner"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Server"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="subcontext"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Topic"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Version"
			Group="Behavior"
			InitialValue="17.6"
			Type="Double"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Wait"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="_LastIRCCode"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
